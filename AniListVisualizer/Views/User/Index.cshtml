@using System.Globalization
@using System.Text
@using AniListVisualizer.Services
@model UserViewModel

@{
    var list = Model.History
        .Where(x => x.status is not EntryStatus.PLANNING && x.watching_start.year is not null)
        .OrderBy(x => Math.Min(x.watching_start.Date.Ticks, x.watching_end.Date.Ticks))
        .ThenBy (x => Math.Max(x.watching_start.Date.Ticks, x.watching_end.Date.Ticks))
        .ToList();

    var all_years = GetAllYears();
    
    if (Model.Years is not null)
    {
        list = list.Where(x => x.Years.Overlaps(Model.Years)).ToList();
    }

    var empty = list.Count == 0;

    ViewBag.Title = Model.User.name + " · AniList Visualizer";
    ViewBag.Container = empty ? "container-xl max-800" : "container-xd";
    ViewBag.Icon = Model.User.avatar["medium"];

    Layout = "_Layout";

    var series_shown = empty ? 0 : list.DistinctBy(x => x.media.Series).Count();
    var series_total =    Model.History.DistinctBy(x => x.media.Series).Count();

    string GetTitleCountText()
    {
        var total = Model.History.Count;

        return $"{list.Count}/{Helpers.Ending_ENG(total, "title")} · {series_shown}/{series_total} series";
    }

    IEnumerable<int> GetAllYears()
    {
        var min = list.Min(x => x.min).Year;
        var max = list.Max(x => x.max).Year;

        return Enumerable.Range(min, max - min + 1);
    }
}

@section Header
{
    <header class="user">
        @await Html.PartialAsync("_Navigation")
        <div class="banner-shadow"></div>
        <div class="@ViewBag.Container user-info">
            <a href="@Model.User.URL">
                <img class="avatar" src="@Model.User.avatar["large"]" alt="avatar"/>
            </a>
            <div class="user-info text">
                <h1 class="user-name">@Model.User.name</h1>
                <p class="user-count">@GetTitleCountText()</p>
            </div>
        </div>
    </header>
    <div class="nav-strip"></div>
}
@section Scripts
{
    <script src="~/js/user.js"></script>
}

@if (!empty)
{
    <div class="timeline-nav">
        @if (Model.Years is not null)
        {
            <a class="year-link" href="/user/@Model.User.name">All</a>
        }
        @foreach (var year in all_years)
        {
            var plus = Model.Years is { } range && year > range.Max();
            
            <a class="year-link @(plus ? "cut-r" : "")" href="/user/@Model.User.name/@year">@year</a>
            if (plus)
            {
                <a class="year-link plus cut-l cut-r" href="/user/@Model.User.name/@Model.Years!.Min()/@year">[+]</a>
            }
        }
    </div>

    var header = Model.Years is null ? "All:" : Model.Years.Count == 1 ? $"{Model.Years.First()}:" : $"{Model.Years.Min()} - {Model.Years.Max()}:";
    
    <div class="control-panel">
        <h3 class="section-name">@header</h3>
        <div class="actions" id="buttons">
            <button class="section" onclick="SwitchLanguage()">
                @*<img src="~/svg/translate.svg" alt="JAP / ENG"/>*@
                <span id="lang" a="english" b="japanese">日本語</span>
            </button>
            <button class="section" onclick="ToggleGrouping()">
                <span id="group" a="default" b="groups">Group</span>
            </button>
            <button class="section" onclick="ChangeOrder()">
                <span id="reverse" a="default" b="reverse">Reverse</span>
            </button>
        </div>
    </div>

    <script>
    $(document).ready(function()
        {
            $(document).on("keydown", function(event)
            {
                var key = event.which;

                if      (key == 74) SwitchLanguage();
                else if (key == 71) ToggleGrouping();
                else if (key == 82) ChangeOrder();
            });
        });
    </script>

    <div class="medialist section" id="animanga">
        @{
            var yrs = Model.Years is not null;
            
            var min = yrs ? new DateTime(Model.Years!.Min(),  1,  1) : new DateTime(list.Min(x => x.min.Ticks));
            var max = yrs ? new DateTime(Model.Years!.Max(), 12, 31) : DateTime.Today;
            var length = (int)(max - min).TotalDays;

            string Percent(int px) => $"{(100 * px / (double)length).ToString(CultureInfo.InvariantCulture)}%";
            
            var divs = new Dictionary<int, string>(12);
            if (Model.Years?.Count == 1)
            {
                foreach (var month in Enumerable.Range(1, 12))
                {
                    var days = DateTime.DaysInMonth(min.Year, month);
                    var width = Percent(days);
                    divs.Add(month, width);
                }
            }
            else
            {
                foreach (var year in Enumerable.Range(min.Year, max.Year - min.Year + 1))
                {
                    var days = year == min.Year
                        ? (int)(new DateTime(year, 12, 31) - min).TotalDays
                        : year == max.Year
                            ? (int)(max - new DateTime(year, 1, 1)).TotalDays
                            : DateTime.IsLeapYear(year) ? 366 : 365;
                    var width = Percent(days);
                    divs.Add(year, width);
                }
            }

            var number = 0;
        }
        @foreach (var item in list)
        {
            var large  = item.media.coverImage["large"];
            var medium = item.media.coverImage["medium"];
            var color  = item.media.coverImage["color"] ?? "var()";

            <div class="entry" series="@item.media.Series" n="@(number++)">
                <div class="cover">
                    <div class="image color" style="background-image: url(@large), url(@medium); --color-blue: @color;"></div>
                    <a class="link" href="https://anilist.co/@item.media.URL" target="_blank">@(item.media.type == MediaType.ANIME ? "ア" : "マ")</a>
                </div>
                @{
                    var japanese = item.media.title["native"];
                    var english = item.media.title["english"] ?? item.media.title["romaji"];
                    var status = item.status.ToString();
                }
                <div class="title @status" english="@english" japanese="@japanese">@english</div>
                <div class="timeline">
                    @{
                        var start = item.watching_start;
                        var end   = item.watching_end;

                        if (start.Date > end.Date) (start, end) = (end, start); // carelessness fix'

                        var a = min > start.Date ? min : start.Date;
                        var b = max <   end.Date ? max :   end.Date;

                        var left  = (int)(a - min).TotalDays;
                        var width = (int)(b - a)  .TotalDays;

                        var stripes = false;

                        var tip = new StringBuilder();
                        tip.Append("<p>").Append(a == b ? start.ShortDate() : FuzzyDate.DateRange(start, end, FuzzyDate.FormatShort)).Append("</p>");
                        if (item.EpisodeCountMatters)
                        {
                            var unit = item.media.EpisodeOrChapter;
                            tip.Append("<p>").Append(item.progress).Append(" ").Append(unit);
                            if (item.progress > 1) tip.Append("s");
                            tip.Append("</p>");

                            var days = (b - a).TotalDays + 1;
                            if (days > 1)
                            {
                                var ppd = item.progress / days;
                                var boring_ah = ppd < 1;
                                var n = Math.Round(boring_ah ? 1 / ppd : ppd, 1);
                                var one = Math.Abs(n - 1) < 0.1;
                                var details = boring_ah ? $"{unit} every {(one ? "day" : $"{n} days")}" : $"{n} {unit}{(one ? "" : "s")}/day";
                                tip.Append("<p>").Append(details).Append("</p>");

                                stripes = days / item.progress > 30;
                            }
                        }
                    }
                    <div class="timeline-row">
                        @foreach (var x in divs)
                        {
                            <div class="timeline-year" style="width: @x.Value;"></div>
                        }
                    </div>
                    @{
                        var release_a = item.media.startDate;
                        var release_b = item.media.endDate;

                        var date_a = release_a.Date;
                        var date_b = release_b.Date;

                        if (release_b.Date > min)
                        {
                            var release_start = (int)(date_a - min).TotalDays;
                            var release_left = Math.Max(0, release_start);
                            var release_width = (int)((date_b > max ? max : date_b) - (date_a < min ? min : date_a)).TotalDays;

                            var season = item.media.season is null
                                ? FuzzyDate.DateRange(release_a, release_b, FuzzyDate.FormatLong, '→')
                                : item.media.SeasonAndYear;

                            <div class="timeline-item releasing stripes" style="margin-left: @Percent(release_left); width: @Percent(release_width)">
                                <div class="season">@season</div>
                            </div>
                        }
                    }
                    <div class="timeline-item tip" style="--left: @Percent(left); --width: @Percent(width)">
                        <div class="range @(stripes ? "stripes" : "")" style="--color-blue: @color;">
                            <div class="hover-box"></div>
                        </div>
                        <span>@Html.Raw(tip.ToString())</span>
                    </div>
                    <div class="timeline-row text">
                        @foreach (var x in divs)
                        {
                            var text = x.Key < 13 ? CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(x.Key) : x.Key.ToString();
                            <div class="timeline-year text" style="width: @x.Value;">@text</div>
                        }
                    </div>
                </div>
                @if (item.status != EntryStatus.COMPLETED)
                {
                    <span class="entry-status">
                        <img src="~/svg/status/@(status).svg" alt="@status"/>
                    </span>
                }
            </div>
        }
    </div>
}
else
{
    <div class="explanation">
        <div class="section osaka"></div>
        <div class="section caption">
            <p>Seems like <a href="@Model.User.URL">this user</a> has no <i>anime or manga</i> with the <b>start date</b> specified.</p>
        </div>
    </div>
}