@using System.Globalization
@using System.Text
@model UserViewModel

@{
    ViewBag.Title = Model.User.name;
    Layout = "_Layout";
    var list = Model.History
        .Where(x => x.status is not EntryStatus.PLANNING && x.watching_start.year is not null)
        .OrderBy(x => x.watching_start.GetDateTime())
        .ThenBy(x => x.watching_end.GetDateTime())
        .ToList();
    var min = list.Min(a => a.watching_start.GetDateTime());
    var max = DateTime.Today;
    var length = (int)(max - min).TotalDays;

    string Percent(int px) => $"{(100 * px / (double)length).ToString(CultureInfo.InvariantCulture)}%";
}

<div id="buttons">
    <button class="butt section" onclick="ToggleInnerHTML('title', 'naming')">
        <img src="~/svg/translate.svg" alt="JAP / ENG"/>
    </button>
</div>
<div class="user-info section">
    <a href="@Model.User.URL">
        <img class="user-pfp" src="@Model.User.avatar["large"]" height="100px" alt="…"/>
    </a>
    <div class="user-info text">
        <h1 class="user-h1">@ViewBag.Title</h1>
        <p class="user-count">@list.Count @(list.Count == 1 ? "title" : "titles")</p>
    </div>
    
    <span class="invisible" id="naming" on="english" off="romaji"></span>
</div>

<div class="medialist">
    <div class="section">
        @{
            var years = Enumerable.Range(min.Year, max.Year - min.Year + 1).ToList();
            var divs = new Dictionary<int, string>(years.Count);
            foreach (var year in years)
            {
                var days = year == min.Year
                    ? (int)(new DateTime(year, 12, 31) - min).TotalDays
                    : year == max.Year
                        ? (int)(max - new DateTime(year, 1, 1)).TotalDays
                        : DateTime.IsLeapYear(year) ? 366 : 365;
                var width = Percent(days);
                divs.Add(year, width);
            }
        }
        @foreach (var item in list)
        {
            var large  = item.media.coverImage["large"];
            var medium = item.media.coverImage["medium"];
            var color  = item.media.coverImage["color"] ?? "var()";

            <div class="entry">
                <div class="cover">
                    <div class="image color" style="background-image: url(@large), url(@medium); --color-blue: @color;"></div>
                    <a class="link" href="https://anilist.co/@item.media.URL" target="_blank">@(item.media.type == MediaType.ANIME ? "ア" : "マ")</a>
                </div>
                @{
                    var romaji = item.media.title["native"];
                    var title = item.media.title["english"] ?? item.media.title["romaji"];
                    var status = item.status.ToString();
                }
                <div class="title @status" english="@title" romaji="@romaji">@title</div>
                <div class="timeline">
                    @{
                        var a = item.watching_start;
                        var b = item.watching_end;
                        
                        var start = a.GetDateTime();
                        var end   = b.GetDateTime();
                        
                        var left  = (int)(start - min).TotalDays;
                        var width = (int)(end - start).TotalDays;

                        var stripes = false;

                        var tip = new StringBuilder();
                        tip.Append("<p>").Append(start == end ? a.ShortDate() : FuzzyDate.DateInterval(a, b, FuzzyDate.FormatShort)).Append("</p>");
                        if (item.EpisodeCountMatters)
                        {
                            var unit = item.media.EpisodeOrChapter;
                            tip.Append("<p>").Append(item.progress).Append(" ").Append(unit);
                            if (item.progress > 1) tip.Append("s");
                            tip.Append("</p>");
                            
                            var days = (end - start + TimeSpan.FromDays(1)).TotalDays;
                            if (days > 1)
                            {
                                var ppd = item.progress / days;
                                var boring_ah = ppd < 1;
                                var n = Math.Round(boring_ah ? 1 / ppd : ppd, 1);
                                var one = Math.Abs(n - 1) < 0.1;
                                var details = boring_ah ? $"{unit} every {(one ? "day" : $"{n} days")}" : $"{n} {unit}{(one ? "" : "s")}/day";
                                tip.Append("<p>").Append(details).Append("</p>");

                                stripes = days / item.progress > 30;
                            }
                        }
                    }
                    <div class="timeline-row">
                        @foreach (var x in divs)
                        {
                            <div class="timeline-year" style="width: @x.Value;"></div>
                        }
                    </div>
                    @{
                        var aa = item.media.startDate;
                        var bb = item.media.endDate;

                        var release_a = aa.GetDateTime();
                        var release_b = bb.GetDateTime();

                        if (release_b > min)
                        {
                            var release_start = (int)(release_a - min).TotalDays;
                            var release_left = Math.Max(0, release_start);
                            var release_width = (int)(release_b - (release_a < min ? min : release_a)).TotalDays;

                            var season = item.media.season is null ? FuzzyDate.DateInterval(aa, bb, FuzzyDate.FormatLong, '→') : item.media.SeasonAndYear;

                            <div class="timeline-item releasing stripes" style="margin-left: @Percent(release_left); width: @Percent(release_width)">
                                <div class="season">@season</div>
                            </div>
                        }
                    }
                    <div class="timeline-item tip" style="margin-left: @Percent(left); width: @Percent(width)">
                        <div class="range @(stripes ? "stripes" : "")" style="--color-blue: @color;">
                            <div class="hover-box"></div>
                        </div>
                        <span>@Html.Raw(tip.ToString())</span>
                    </div>
                    <div class="timeline-row text">
                        @foreach (var x in divs)
                        {
                            <div class="timeline-year text" style="width: @x.Value;">@x.Key</div>
                        }
                    </div>
                </div>
                @if (item.status != EntryStatus.COMPLETED)
                {
                    <span class="entry-status">
                        <img src="~/svg/status/@(status).svg" alt="@status"/>
                    </span>
                }
            </div>
        }
    </div>
</div>